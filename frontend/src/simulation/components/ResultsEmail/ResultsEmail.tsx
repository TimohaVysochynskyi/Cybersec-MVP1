import { useState, useEffect } from "react";
import css from "./ResultsEmail.module.css";

interface UserProgress {
  points: number;
  classifiedEmails: Array<{
    emailId: string;
    isPhishingGuess: boolean;
    isCorrect: boolean;
    timestamp: number;
    responseTime: number;
    emailViewedAt: number;
  }>;
  totalClassifiableEmails: number;
  completionPercentage: number;
  averageResponseTime: number;
}

interface AchievementLevel {
  level: number;
  title: string;
  description: string;
}

export default function ResultsEmail() {
  const [correctAnswers, setCorrectAnswers] = useState<number>(0);
  const [incorrectAnswers, setIncorrectAnswers] = useState<number>(0);
  const [averageTime, setAverageTime] = useState<number>(0);
  const [currentAchievement, setCurrentAchievement] =
    useState<AchievementLevel>({
      level: 4,
      title: "üìö –ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å —É –ú–µ–¥—ñ–∞–≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—ñ",
      description:
        "–í–∏ —Ä–æ–±–∏—Ç–µ –ø–µ—Ä—à—ñ –∫—Ä–æ–∫–∏ —É —Å–≤—ñ—Ç—ñ –±–µ–∑–ø–µ—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –Ω–∞–≤—á–∞—Ç–∏—Å—è!",
    });

  useEffect(() => {
    const achievementLevels: AchievementLevel[] = [
      {
        level: 1,
        title: "üåü –¶–∏—Ñ—Ä–æ–≤–∏–π –î–µ—Ç–µ–∫—Ç–∏–≤",
        description:
          "–í–∏ –±–ª–∏—Å–∫—É—á–µ —Ä–æ–∑–∫—Ä–∏–≤–∞—î—Ç–µ –ø—ñ–¥–æ–∑—Ä—ñ–ª—ñ —Å—Ö–µ–º–∏ —ñ –∑–∞—Ö–∏—â–∞—î—Ç–µ —Å–µ–±–µ –≤—ñ–¥ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ–π —É –º–µ—Ä–µ–∂—ñ!",
      },
      {
        level: 2,
        title: "üîç –ú–µ–¥—ñ–∞ –ê–Ω–∞–ª—ñ—Ç–∏–∫",
        description:
          "–í–∏ –≤–º—ñ–ª–æ –∞–Ω–∞–ª—ñ–∑—É—î—Ç–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —ñ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î—Ç–µ –±—ñ–ª—å—à—ñ—Å—Ç—å —Ö–∏—Ç—Ä–æ—â—ñ–≤ —Ü–∏—Ñ—Ä–æ–≤–∏—Ö —à–∞—Ö—Ä–∞—ó–≤.",
      },
      {
        level: 3,
        title: "‚ö†Ô∏è –û–±–µ—Ä–µ–∂–Ω–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
        description:
          "–í–∏ —Ä–æ–∑–≤–∏–≤–∞—î—Ç–µ –Ω–∞–≤–∏—á–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ –º–∏—Å–ª–µ–Ω–Ω—è —ñ –≤—á–∏—Ç–µ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—Ç–∏ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏.",
      },
      {
        level: 4,
        title: "üìö –ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å —É –ú–µ–¥—ñ–∞–≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—ñ",
        description:
          "–í–∏ —Ä–æ–±–∏—Ç–µ –ø–µ—Ä—à—ñ –∫—Ä–æ–∫–∏ —É —Å–≤—ñ—Ç—ñ –±–µ–∑–ø–µ—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –Ω–∞–≤—á–∞—Ç–∏—Å—è!",
      },
    ];

    const getAchievementByScore = (
      correctAnswers: number,
      totalAnswers: number
    ): AchievementLevel => {
      const percentage = (correctAnswers / totalAnswers) * 100;

      if (percentage >= 87.5) return achievementLevels[0]; // 7-8 –∑ 8
      if (percentage >= 62.5) return achievementLevels[1]; // 5-6 –∑ 8
      if (percentage >= 37.5) return achievementLevels[2]; // 3-4 –∑ 8
      return achievementLevels[3]; // 0-2 –∑ 8
    };

    const loadResults = () => {
      try {
        const storedProgress = localStorage.getItem("cybersec-user-progress");
        console.log("Loading results from localStorage...", storedProgress);

        if (storedProgress) {
          const progress: UserProgress = JSON.parse(storedProgress);
          console.log("Parsed progress:", progress);

          // Extract data from progress object
          const correct = progress.classifiedEmails
            ? progress.classifiedEmails.filter((e) => e.isCorrect === true)
                .length
            : 0;
          const total = progress.totalClassifiableEmails || 8;
          const incorrect = total - correct;
          const avgTimeSeconds = progress.averageResponseTime
            ? Math.round(progress.averageResponseTime / 1000)
            : 0;

          console.log("Calculated:", {
            correct,
            total,
            incorrect,
            avgTimeSeconds,
          });

          // Update state
          setCorrectAnswers(correct);
          setIncorrectAnswers(incorrect);
          setAverageTime(avgTimeSeconds);

          // Update achievement based on performance
          const achievement = getAchievementByScore(correct, total);
          setCurrentAchievement(achievement);

          console.log("Setting achievement:", achievement);
        } else {
          console.log("No progress data found, using defaults");
          // Default values if no data
          setCorrectAnswers(0);
          setIncorrectAnswers(0);
          setAverageTime(0);
          setCurrentAchievement(achievementLevels[3]);
        }
      } catch (error) {
        console.error("Error loading results:", error);
        // Default values on error
        setCorrectAnswers(0);
        setIncorrectAnswers(0);
        setAverageTime(0);
        setCurrentAchievement(achievementLevels[3]);
      }
    };

    loadResults();
  }, []);

  return (
    <div className={css.emailBody}>
      <div className={css.emailContainer}>
        <div className={css.headerSection}>
          <div className={css.successIcon}>
            <svg width="32" height="32" viewBox="0 0 24 24" fill="currentColor">
              <path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" />
            </svg>
          </div>
          <h1 className={css.mainTitle}>–í—ñ—Ç–∞—î–º–æ!</h1>
          <p className={css.subtitle}>
            –í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–µ–¥—ñ–∞–≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—ñ
          </p>

          <div className={css.achievementBadge}>
            <h3 className={css.achievementTitle}>{currentAchievement.title}</h3>
            <p className={css.achievementText}>
              {currentAchievement.description}
            </p>
          </div>
        </div>

        <div className={css.contentSection}>
          <p className={css.congratulationsText}>
            üéØ –í—ñ–¥–º—ñ–Ω–Ω–∞ —Ä–æ–±–æ—Ç–∞! –í–∏ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞–ª–∏ –≤—Å—ñ –ª–∏—Å—Ç–∏ —Ç–∞ –ø—Ä–æ–∫–∞—á–∞–ª–∏ —Å–≤–æ—é
            –º–µ–¥—ñ–∞–≥—Ä–∞–º–æ—Ç–Ω—ñ—Å—Ç—å
          </p>

          <div className={css.resultsGrid}>
            <div className={`${css.resultCard} ${css.correct}`}>
              <h2 className={`${css.resultNumber} ${css.correct}`}>
                {correctAnswers}
              </h2>
              <p className={css.resultLabel}>–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π</p>
            </div>
            <div className={`${css.resultCard} ${css.incorrect}`}>
              <h2 className={`${css.resultNumber} ${css.incorrect}`}>
                {incorrectAnswers}
              </h2>
              <p className={css.resultLabel}>–ü–æ–º–∏–ª–æ–∫</p>
            </div>
            <div className={`${css.resultCard} ${css.time}`}>
              <div className={css.timeDisplay}>{averageTime}—Å</div>
              <p className={css.resultLabel}>–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å</p>
              <p className={css.resultSublabel}>–Ω–∞ –∞–Ω–∞–ª—ñ–∑ –ª–∏—Å—Ç–∞</p>
            </div>
          </div>

          <div className={css.feedbackSection}>
            <h3 className={css.feedbackTitle}>
              ü§ù –î–æ–ø–æ–º–æ–∂—ñ—Ç—å –Ω–∞–º —Å—Ç–∞—Ç–∏ –∫—Ä–∞—â–∏–º–∏
            </h3>
            <p className={css.feedbackText}>
              –í–∞—à–∞ –¥—É–º–∫–∞ –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–∞ –¥–ª—è –Ω–∞—Å! –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤—Ä–∞–∂–µ–Ω–Ω—è–º–∏ –ø—Ä–æ
              —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π—Ç–µ —ñ–¥–µ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è.
            </p>
            <a
              href="https://forms.gle/your-feedback-form"
              className={css.ctaButton}
            >
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="currentColor"
              >
                <path d="M20,8L12,13L4,8V6L12,11L20,6M20,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V6C22,4.89 21.1,4 20,4Z" />
              </svg>
              –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫
            </a>
          </div>
        </div>

        <div className={css.footerSection}>
          <p className={css.footerText}>
            üõ°Ô∏è –ü–∞–º'—è—Ç–∞–π—Ç–µ: –∫—Ä–∏—Ç–∏—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è —Ç–∞ –º–µ–¥—ñ–∞–≥—Ä–∞–º–æ—Ç–Ω—ñ—Å—Ç—å - –≤–∞—à –Ω–∞–π–∫—Ä–∞—â–∏–π
            –∑–∞—Ö–∏—Å—Ç –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É —Å–≤—ñ—Ç—ñ!
          </p>
        </div>
      </div>
    </div>
  );
}
